diff --git a/../steps/01_instance_creation/main.go b/../steps/02_validation_layers/main.go
index beaec8b..83f2a51 100644
--- a/../steps/01_instance_creation/main.go
+++ b/../steps/02_validation_layers/main.go
@@ -6,14 +6,20 @@ import (
 	"github.com/vkngwrapper/core"
 	"github.com/vkngwrapper/core/common"
 	"github.com/vkngwrapper/core/core1_0"
+	"github.com/vkngwrapper/extensions/ext_debug_utils"
 	"log"
 )
 
+var validationLayers = []string{"VK_LAYER_KHRONOS_validation"}
+
+const enableValidationLayers = true
+
 type HelloTriangleApplication struct {
-	loader core.Loader
 	window *sdl.Window
+	loader core.Loader
 
-	instance core1_0.Instance
+	instance       core1_0.Instance
+	debugMessenger ext_debug_utils.DebugUtilsMessenger
 }
 
 func (app *HelloTriangleApplication) Run() error {
@@ -51,7 +57,12 @@ func (app *HelloTriangleApplication) initWindow() error {
 }
 
 func (app *HelloTriangleApplication) initVulkan() error {
-	return app.createInstance()
+	err := app.createInstance()
+	if err != nil {
+		return err
+	}
+
+	return app.setupDebugMessenger()
 }
 
 func (app *HelloTriangleApplication) mainLoop() error {
@@ -69,6 +80,10 @@ appLoop:
 }
 
 func (app *HelloTriangleApplication) cleanup() {
+	if app.debugMessenger != nil {
+		app.debugMessenger.Destroy(nil)
+	}
+
 	if app.instance != nil {
 		app.instance.Destroy(nil)
 	}
@@ -103,6 +118,29 @@ func (app *HelloTriangleApplication) createInstance() error {
 		instanceOptions.EnabledExtensionNames = append(instanceOptions.EnabledExtensionNames, ext)
 	}
 
+	if enableValidationLayers {
+		instanceOptions.EnabledExtensionNames = append(instanceOptions.EnabledExtensionNames, ext_debug_utils.ExtensionName)
+	}
+
+	// Add layers
+	layers, _, err := app.loader.AvailableLayers()
+	if err != nil {
+		return err
+	}
+
+	if enableValidationLayers {
+		for _, layer := range validationLayers {
+			_, hasValidation := layers[layer]
+			if !hasValidation {
+				return errors.Newf("createInstance: cannot add validation- layer %s not available- install LunarG Vulkan SDK", layer)
+			}
+			instanceOptions.EnabledLayerNames = append(instanceOptions.EnabledLayerNames, layer)
+		}
+
+		// Add debug messenger
+		instanceOptions.Next = app.debugMessengerOptions()
+	}
+
 	app.instance, _, err = app.loader.CreateInstance(nil, instanceOptions)
 	if err != nil {
 		return err
@@ -111,6 +149,34 @@ func (app *HelloTriangleApplication) createInstance() error {
 	return nil
 }
 
+func (app *HelloTriangleApplication) debugMessengerOptions() ext_debug_utils.DebugUtilsMessengerCreateInfo {
+	return ext_debug_utils.DebugUtilsMessengerCreateInfo{
+		MessageSeverity: ext_debug_utils.SeverityError | ext_debug_utils.SeverityWarning,
+		MessageType:     ext_debug_utils.TypeGeneral | ext_debug_utils.TypeValidation | ext_debug_utils.TypePerformance,
+		UserCallback:    app.logDebug,
+	}
+}
+
+func (app *HelloTriangleApplication) setupDebugMessenger() error {
+	if !enableValidationLayers {
+		return nil
+	}
+
+	var err error
+	debugLoader := ext_debug_utils.CreateExtensionFromInstance(app.instance)
+	app.debugMessenger, _, err = debugLoader.CreateDebugUtilsMessenger(app.instance, nil, app.debugMessengerOptions())
+	if err != nil {
+		return err
+	}
+
+	return nil
+}
+
+func (app *HelloTriangleApplication) logDebug(msgType ext_debug_utils.DebugUtilsMessageTypeFlags, severity ext_debug_utils.DebugUtilsMessageSeverityFlags, data *ext_debug_utils.DebugUtilsMessengerCallbackData) bool {
+	log.Printf("[%s %s] - %s", severity, msgType, data.Message)
+	return false
+}
+
 func main() {
 	app := &HelloTriangleApplication{}
 
