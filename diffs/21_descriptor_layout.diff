diff --git a/../steps/20_index_buffer/main.go b/../steps/21_descriptor_layout/main.go
index 4180a1b..183252f 100644
--- a/../steps/20_index_buffer/main.go
+++ b/../steps/21_descriptor_layout/main.go
@@ -5,6 +5,8 @@ import (
 	"embed"
 	"encoding/binary"
 	"github.com/cockroachdb/errors"
+	"github.com/go-gl/mathgl/mgl32"
+	"github.com/loov/hrtime"
 	"github.com/veandco/go-sdl2/sdl"
 	"github.com/vkngwrapper/core"
 	"github.com/vkngwrapper/core/common"
@@ -14,6 +16,7 @@ import (
 	"github.com/vkngwrapper/extensions/khr_swapchain"
 	vkng_sdl2 "github.com/vkngwrapper/integrations/sdl2"
 	"log"
+	"math"
 	"unsafe"
 )
 
@@ -43,8 +46,14 @@ type SwapChainSupportDetails struct {
 }
 
 type Vertex struct {
-	X, Y    float32 // Could also be Position Vector2 - as long as Vector2 is a value, not a pointer
-	R, G, B float32 // Could also be Color Vector3
+	Position mgl32.Vec2
+	Color    mgl32.Vec3
+}
+
+type UniformBufferObject struct {
+	Model mgl32.Mat4
+	View  mgl32.Mat4
+	Proj  mgl32.Mat4
 }
 
 func getVertexBindingDescription() []core1_0.VertexInputBindingDescription {
@@ -64,23 +73,23 @@ func getVertexAttributeDescriptions() []core1_0.VertexInputAttributeDescription
 		{
 			Binding:  0,
 			Location: 0,
-			Format:   core1_0.FormatR32G32SignedFloat,
-			Offset:   int(unsafe.Offsetof(v.X)),
+			Format:   core1_0.FormatR32G32B32SignedFloat,
+			Offset:   int(unsafe.Offsetof(v.Position)),
 		},
 		{
 			Binding:  0,
 			Location: 1,
 			Format:   core1_0.FormatR32G32B32SignedFloat,
-			Offset:   int(unsafe.Offsetof(v.R)),
+			Offset:   int(unsafe.Offsetof(v.Color)),
 		},
 	}
 }
 
 var vertices = []Vertex{
-	{X: -0.5, Y: -0.5, R: 1, G: 0, B: 0},
-	{X: 0.5, Y: -0.5, R: 0, G: 1, B: 0},
-	{X: 0.5, Y: 0.5, R: 0, G: 0, B: 1},
-	{X: -0.5, Y: 0.5, R: 1, G: 1, B: 1},
+	{Position: mgl32.Vec2{-0.5, -0.5}, Color: mgl32.Vec3{1, 0, 0}},
+	{Position: mgl32.Vec2{0.5, -0.5}, Color: mgl32.Vec3{0, 1, 0}},
+	{Position: mgl32.Vec2{0.5, 0.5}, Color: mgl32.Vec3{0, 0, 1}},
+	{Position: mgl32.Vec2{-0.5, 0.5}, Color: mgl32.Vec3{1, 1, 1}},
 }
 
 var indices = []uint16{0, 1, 2, 2, 3, 0}
@@ -107,9 +116,10 @@ type HelloTriangleApplication struct {
 	swapchainImageViews   []core1_0.ImageView
 	swapchainFramebuffers []core1_0.Framebuffer
 
-	renderPass       core1_0.RenderPass
-	pipelineLayout   core1_0.PipelineLayout
-	graphicsPipeline core1_0.Pipeline
+	renderPass          core1_0.RenderPass
+	descriptorSetLayout core1_0.DescriptorSetLayout
+	pipelineLayout      core1_0.PipelineLayout
+	graphicsPipeline    core1_0.Pipeline
 
 	commandPool    core1_0.CommandPool
 	commandBuffers []core1_0.CommandBuffer
@@ -119,11 +129,15 @@ type HelloTriangleApplication struct {
 	inFlightFence           []core1_0.Fence
 	imagesInFlight          []core1_0.Fence
 	currentFrame            int
+	frameStart              float64
 
 	vertexBuffer       core1_0.Buffer
 	vertexBufferMemory core1_0.DeviceMemory
 	indexBuffer        core1_0.Buffer
 	indexBufferMemory  core1_0.DeviceMemory
+
+	uniformBuffers       []core1_0.Buffer
+	uniformBuffersMemory []core1_0.DeviceMemory
 }
 
 func (app *HelloTriangleApplication) Run() error {
@@ -201,6 +215,11 @@ func (app *HelloTriangleApplication) initVulkan() error {
 		return err
 	}
 
+	err = app.createDescriptorSetLayout()
+	if err != nil {
+		return err
+	}
+
 	err = app.createGraphicsPipeline()
 	if err != nil {
 		return err
@@ -226,6 +245,11 @@ func (app *HelloTriangleApplication) initVulkan() error {
 		return err
 	}
 
+	err = app.createUniformBuffers()
+	if err != nil {
+		return err
+	}
+
 	err = app.createCommandBuffers()
 	if err != nil {
 		return err
@@ -307,11 +331,25 @@ func (app *HelloTriangleApplication) cleanupSwapChain() {
 		app.swapchain.Destroy(nil)
 		app.swapchain = nil
 	}
+
+	for i := 0; i < len(app.uniformBuffers); i++ {
+		app.uniformBuffers[i].Destroy(nil)
+	}
+	app.uniformBuffers = app.uniformBuffers[:0]
+
+	for i := 0; i < len(app.uniformBuffersMemory); i++ {
+		app.uniformBuffersMemory[i].Free(nil)
+	}
+	app.uniformBuffersMemory = app.uniformBuffersMemory[:0]
 }
 
 func (app *HelloTriangleApplication) cleanup() {
 	app.cleanupSwapChain()
 
+	if app.descriptorSetLayout != nil {
+		app.descriptorSetLayout.Destroy(nil)
+	}
+
 	if app.indexBuffer != nil {
 		app.indexBuffer.Destroy(nil)
 	}
@@ -407,6 +445,11 @@ func (app *HelloTriangleApplication) recreateSwapChain() error {
 		return err
 	}
 
+	err = app.createUniformBuffers()
+	if err != nil {
+		return err
+	}
+
 	err = app.createCommandBuffers()
 	if err != nil {
 		return err
@@ -721,6 +764,26 @@ func (app *HelloTriangleApplication) createRenderPass() error {
 	return nil
 }
 
+func (app *HelloTriangleApplication) createDescriptorSetLayout() error {
+	var err error
+	app.descriptorSetLayout, _, err = app.device.CreateDescriptorSetLayout(nil, core1_0.DescriptorSetLayoutCreateInfo{
+		Bindings: []core1_0.DescriptorSetLayoutBinding{
+			{
+				Binding:         0,
+				DescriptorType:  core1_0.DescriptorTypeUniformBuffer,
+				DescriptorCount: 1,
+
+				StageFlags: core1_0.StageVertex,
+			},
+		},
+	})
+	if err != nil {
+		return err
+	}
+
+	return nil
+}
+
 func bytesToBytecode(b []byte) []uint32 {
 	byteCode := make([]uint32, len(b)/4)
 	for i := 0; i < len(byteCode); i++ {
@@ -837,7 +900,11 @@ func (app *HelloTriangleApplication) createGraphicsPipeline() error {
 		},
 	}
 
-	app.pipelineLayout, _, err = app.device.CreatePipelineLayout(nil, core1_0.PipelineLayoutCreateInfo{})
+	app.pipelineLayout, _, err = app.device.CreatePipelineLayout(nil, core1_0.PipelineLayoutCreateInfo{
+		SetLayouts: []core1_0.DescriptorSetLayout{
+			app.descriptorSetLayout,
+		},
+	})
 	if err != nil {
 		return err
 	}
@@ -985,6 +1052,22 @@ func (app *HelloTriangleApplication) createIndexBuffer() error {
 	return app.copyBuffer(stagingBuffer, app.indexBuffer, bufferSize)
 }
 
+func (app *HelloTriangleApplication) createUniformBuffers() error {
+	bufferSize := int(unsafe.Sizeof(UniformBufferObject{}))
+
+	for i := 0; i < len(app.swapchainImages); i++ {
+		buffer, memory, err := app.createBuffer(bufferSize, core1_0.BufferUsageUniformBuffer, core1_0.MemoryPropertyHostVisible|core1_0.MemoryPropertyHostCoherent)
+		if err != nil {
+			return err
+		}
+
+		app.uniformBuffers = append(app.uniformBuffers, buffer)
+		app.uniformBuffersMemory = append(app.uniformBuffersMemory, memory)
+	}
+
+	return nil
+}
+
 func (app *HelloTriangleApplication) createBuffer(size int, usage core1_0.BufferUsageFlags, properties core1_0.MemoryPropertyFlags) (core1_0.Buffer, core1_0.DeviceMemory, error) {
 	buffer, _, err := app.device.CreateBuffer(nil, core1_0.BufferCreateInfo{
 		Size:        size,
@@ -1181,6 +1264,11 @@ func (app *HelloTriangleApplication) drawFrame() error {
 		return err
 	}
 
+	err = app.updateUniformBuffer(imageIndex)
+	if err != nil {
+		return err
+	}
+
 	_, err = app.graphicsQueue.Submit(app.inFlightFence[app.currentFrame], []core1_0.SubmitInfo{
 		{
 			WaitSemaphores:   []core1_0.Semaphore{app.imageAvailableSemaphore[app.currentFrame]},
@@ -1209,6 +1297,21 @@ func (app *HelloTriangleApplication) drawFrame() error {
 	return nil
 }
 
+func (app *HelloTriangleApplication) updateUniformBuffer(currentImage int) error {
+	currentTime := hrtime.NowPrecision()
+	timePeriod := float32(math.Mod(currentTime, 4.0))
+
+	ubo := UniformBufferObject{}
+	ubo.Model = mgl32.HomogRotate3D(timePeriod*mgl32.DegToRad(90.0), mgl32.Vec3{0, 0, 1})
+	ubo.View = mgl32.LookAt(2, 2, 2, 0, 0, 0, 0, 0, 1)
+	aspectRatio := float32(app.swapchainExtent.Width) / float32(app.swapchainExtent.Height)
+	ubo.Proj = mgl32.Perspective(mgl32.DegToRad(45), aspectRatio, 0.1, 10)
+	ubo.Proj[5] *= -1
+
+	err := writeData(app.uniformBuffersMemory[currentImage], 0, &ubo)
+	return err
+}
+
 func (app *HelloTriangleApplication) chooseSwapSurfaceFormat(availableFormats []khr_surface.SurfaceFormat) khr_surface.SurfaceFormat {
 	for _, format := range availableFormats {
 		if format.Format == core1_0.FormatB8G8R8A8SRGB && format.ColorSpace == khr_surface.ColorSpaceSRGBNonlinear {
