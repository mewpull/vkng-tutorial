diff --git a/../steps/03_physical_device_selection/main.go b/../steps/04_logical_device/main.go
index 49b3c99..91e740b 100644
--- a/../steps/03_physical_device_selection/main.go
+++ b/../steps/04_logical_device/main.go
@@ -7,6 +7,7 @@ import (
 	"github.com/vkngwrapper/core/common"
 	"github.com/vkngwrapper/core/core1_0"
 	"github.com/vkngwrapper/extensions/ext_debug_utils"
+	"github.com/vkngwrapper/extensions/khr_portability_subset"
 	"log"
 )
 
@@ -30,6 +31,9 @@ type HelloTriangleApplication struct {
 	debugMessenger ext_debug_utils.DebugUtilsMessenger
 
 	physicalDevice core1_0.PhysicalDevice
+	device         core1_0.Device
+
+	graphicsQueue core1_0.Queue
 }
 
 func (app *HelloTriangleApplication) Run() error {
@@ -77,7 +81,12 @@ func (app *HelloTriangleApplication) initVulkan() error {
 		return err
 	}
 
-	return app.pickPhysicalDevice()
+	err = app.pickPhysicalDevice()
+	if err != nil {
+		return err
+	}
+
+	return app.createLogicalDevice()
 }
 
 func (app *HelloTriangleApplication) mainLoop() error {
@@ -95,6 +104,10 @@ appLoop:
 }
 
 func (app *HelloTriangleApplication) cleanup() {
+	if app.device != nil {
+		app.device.Destroy(nil)
+	}
+
 	if app.debugMessenger != nil {
 		app.debugMessenger.Destroy(nil)
 	}
@@ -201,9 +214,52 @@ func (app *HelloTriangleApplication) pickPhysicalDevice() error {
 	}
 
 	if app.physicalDevice == nil {
-		return errors.New("failed to find a suitable GPU!")
+		return errors.Newf("failed to find a suitable GPU!")
+	}
+
+	return nil
+}
+
+func (app *HelloTriangleApplication) createLogicalDevice() error {
+	indices, err := app.findQueueFamilies(app.physicalDevice)
+	if err != nil {
+		return err
+	}
+
+	uniqueQueueFamilies := []int{*indices.GraphicsFamily}
+
+	var queueFamilyOptions []core1_0.DeviceQueueCreateInfo
+	queuePriority := float32(1.0)
+	for _, queueFamily := range uniqueQueueFamilies {
+		queueFamilyOptions = append(queueFamilyOptions, core1_0.DeviceQueueCreateInfo{
+			QueueFamilyIndex: queueFamily,
+			QueuePriorities:  []float32{queuePriority},
+		})
+	}
+
+	var extensionNames []string
+
+	// Makes this example compatible with vulkan portability, necessary to run on mobile & mac
+	extensions, _, err := app.physicalDevice.EnumerateDeviceExtensionProperties()
+	if err != nil {
+		return err
 	}
 
+	_, supported := extensions[khr_portability_subset.ExtensionName]
+	if supported {
+		extensionNames = append(extensionNames, khr_portability_subset.ExtensionName)
+	}
+
+	app.device, _, err = app.physicalDevice.CreateDevice(nil, core1_0.DeviceCreateInfo{
+		QueueCreateInfos:      queueFamilyOptions,
+		EnabledFeatures:       &core1_0.PhysicalDeviceFeatures{},
+		EnabledExtensionNames: extensionNames,
+	})
+	if err != nil {
+		return err
+	}
+
+	app.graphicsQueue = app.device.GetQueue(*indices.GraphicsFamily, 0)
 	return nil
 }
 
@@ -239,10 +295,6 @@ func (app *HelloTriangleApplication) logDebug(msgType ext_debug_utils.DebugUtils
 	return false
 }
 
-func fail(val any) {
-	log.Fatalf("%+v\n", val)
-}
-
 func main() {
 	app := &HelloTriangleApplication{}
 
